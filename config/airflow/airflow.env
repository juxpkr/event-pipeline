PROJECT_ROOT=/opt/airflow
AIRFLOW_VAR_ENV_FILE_PATH=/opt/airflow/.env

# Core Configuration
AIRFLOW__CORE__EXECUTOR=LocalExecutor
AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
#AIRFLOW__WEBSERVER__SECRET_KEY=

# 2. DB Connection
# 5분 이상 유휴 상태인 DB 커넥션을 자동으로 회수하고 새로 연결
# 장시간 실행되는 작업에서 방화벽 등으로 인해 연결이 끊어지는 것을 방지
AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_RECYCLE=300

# DB 커넥션 풀의 기본 사이즈
# 동시 작업량(parallelism)의 절반 정도로 설정하는 것이 일반적
AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_SIZE=5

# 기본 풀이 꽉 찼을 때 추가로 생성할 수 있는 임시 커넥션 수
# 너무 많으면 DB에 부담을 주므로, 풀 사이즈와 비슷하게 설정
AIRFLOW__DATABASE__SQL_ALCHEMY_MAX_OVERFLOW=10

# 3. 스케줄러 성능 및 부하 제어
# Airflow 전체에서 동시에 실행될 수 있는 총 태스크 수
# 시스템의 전체 부하를 결정하는 가장 중요한 설정. 16으로 시작
AIRFLOW__CORE__PARALLELISM=8

# DAG 파일들을 파싱하는 프로세스 수.
# DAG이 수백 개가 아닌 이상 2가 가장 효율적. 불필요한 CPU 낭비 방지
AIRFLOW__SCHEDULER__PARSING_PROCESSES=2

# 하나의 DAG 내에서 동시에 실행될 수 있는 태스크 수.
# 특정 DAG이 시스템의 모든 자원을 독점하는 것을 방지.
AIRFLOW__CORE__DAG_CONCURRENCY=8

# 스케줄러가 DAG 폴더를 얼마나 자주 스캔할지 (초)
# 너무 잦으면 불필요한 부하 발생 5분(300초)이 합리적
AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL=300

# 4. 웹서버 성능 
# 웹서버 UI 요청을 처리하는 Gunicorn 워커 프로세스 수
# CPU 코어 수의 2배 정도가 일반적 4개면 대부분의 환경에서 쾌적
AIRFLOW__WEBSERVER__WORKERS=4

# 워커가 응답이 없으면 120초 뒤에 자동으로 재시작
AIRFLOW__WEBSERVER__WORKER_TIMEOUT=120

# 워커 컨테이너 한 개 가 동시에 처리할 수 있는 Task의 수
AIRFLOW__CORE__WORKER_CONCURRENCY=8